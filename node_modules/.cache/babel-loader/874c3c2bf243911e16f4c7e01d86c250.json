{"ast":null,"code":"'use strict'; //first we import our dependencies…\n//import express from 'express';\n\nimport mongoose from 'mongoose';\nvar port = process.env.API_PORT || 27017;\nmongoose.find('name', 'moi'); // db config\n\nmongoose.connect('mongodb://:@localhost:27017/mesclients');\nconsole.log(mongoose); //now we should configure the API to use bodyParser and look for \n//JSON data in the request body\n\napp.use(bodyParser.urlencoded({\n  extended: true\n}));\napp.use(bodyParser.json()); //To prevent errors from Cross Origin Resource Sharing, we will set \n//our headers to allow CORS with middleware like so:\n\napp.use(function (req, res, next) {\n  res.setHeader('Access-Control-Allow-Origin', '*');\n  res.setHeader('Access-Control-Allow-Credentials', 'true');\n  res.setHeader('Access-Control-Allow-Methods', 'GET,HEAD,OPTIONS,POST,PUT,DELETE');\n  res.setHeader('Access-Control-Allow-Headers', 'Access-Control-Allow-Headers, Origin,Accept, X-Requested-With, Content-Type, Access-Control-Request-Method, Access-Control-Request-Headers'); //and remove cacheing so we get the most recent comments\n\n  res.setHeader('Cache-Control', 'no-cache');\n  next();\n}); //now we can set the route path & initialize the API\n\nrouter.get('/', function (req, res) {\n  res.json({\n    message: 'API Initialized!'\n  });\n}); //adding the /comments route to our /api router\n\nrouter.route('/comments') //retrieve all comments from the database\n.get(function (req, res) {\n  //looks at our Comment Schema\n  Comment.find(function (err, comments) {\n    if (err) res.send(err); //responds with a json object of our database comments.\n\n    res.json(comments);\n  });\n}); //Use our router configuration when we call /api\n\napp.use('/api', router); //starts the server and listens for requests\n\napp.listen(port, function () {\n  console.log(\"api running on port \".concat(port));\n});","map":{"version":3,"sources":["/Users/loryleticee/first-project/src/server.js"],"names":["mongoose","port","process","env","API_PORT","find","connect","console","log","app","use","bodyParser","urlencoded","extended","json","req","res","next","setHeader","router","get","message","route","Comment","err","comments","send","listen"],"mappings":"AAAA,a,CACA;AACA;;AACA,OAAOA,QAAP,MAAqB,UAArB;AAEA,IAAIC,IAAI,GAAGC,OAAO,CAACC,GAAR,CAAYC,QAAZ,IAAwB,KAAnC;AACCJ,QAAQ,CAACK,IAAT,CAAc,MAAd,EAAqB,KAArB,E,CACD;;AACAL,QAAQ,CAACM,OAAT,CAAiB,wCAAjB;AACAC,OAAO,CAACC,GAAR,CAAYR,QAAZ,E,CAEA;AACA;;AACAS,GAAG,CAACC,GAAJ,CAAQC,UAAU,CAACC,UAAX,CAAsB;AAAEC,EAAAA,QAAQ,EAAE;AAAZ,CAAtB,CAAR;AACAJ,GAAG,CAACC,GAAJ,CAAQC,UAAU,CAACG,IAAX,EAAR,E,CACA;AACA;;AACAL,GAAG,CAACC,GAAJ,CAAQ,UAASK,GAAT,EAAcC,GAAd,EAAmBC,IAAnB,EAAyB;AAChCD,EAAAA,GAAG,CAACE,SAAJ,CAAc,6BAAd,EAA6C,GAA7C;AACAF,EAAAA,GAAG,CAACE,SAAJ,CAAc,kCAAd,EAAkD,MAAlD;AACAF,EAAAA,GAAG,CAACE,SAAJ,CAAc,8BAAd,EAA8C,kCAA9C;AACAF,EAAAA,GAAG,CAACE,SAAJ,CAAc,8BAAd,EAA8C,4IAA9C,EAJgC,CAKjC;;AACCF,EAAAA,GAAG,CAACE,SAAJ,CAAc,eAAd,EAA+B,UAA/B;AACAD,EAAAA,IAAI;AACJ,CARD,E,CASA;;AACAE,MAAM,CAACC,GAAP,CAAW,GAAX,EAAgB,UAASL,GAAT,EAAcC,GAAd,EAAmB;AAClCA,EAAAA,GAAG,CAACF,IAAJ,CAAS;AAAEO,IAAAA,OAAO,EAAE;AAAX,GAAT;AACA,CAFD,E,CAIA;;AACAF,MAAM,CAACG,KAAP,CAAa,WAAb,EACC;AADD,CAEGF,GAFH,CAEO,UAASL,GAAT,EAAcC,GAAd,EAAmB;AACxB;AACAO,EAAAA,OAAO,CAAClB,IAAR,CAAa,UAASmB,GAAT,EAAcC,QAAd,EAAwB;AACnC,QAAID,GAAJ,EACAR,GAAG,CAACU,IAAJ,CAASF,GAAT,EAFmC,CAGnC;;AACAR,IAAAA,GAAG,CAACF,IAAJ,CAASW,QAAT;AACD,GALD;AAMA,CAVF,E,CAcA;;AACAhB,GAAG,CAACC,GAAJ,CAAQ,MAAR,EAAgBS,MAAhB,E,CACA;;AACAV,GAAG,CAACkB,MAAJ,CAAW1B,IAAX,EAAiB,YAAW;AAC3BM,EAAAA,OAAO,CAACC,GAAR,+BAAmCP,IAAnC;AACA,CAFD","sourcesContent":["'use strict'\n//first we import our dependencies…\n//import express from 'express';\nimport mongoose from 'mongoose';\n\nvar port = process.env.API_PORT || 27017;\n mongoose.find('name','moi');\n// db config\nmongoose.connect('mongodb://:@localhost:27017/mesclients');\nconsole.log(mongoose);\n\n//now we should configure the API to use bodyParser and look for \n//JSON data in the request body\napp.use(bodyParser.urlencoded({ extended: true }));\napp.use(bodyParser.json());\n//To prevent errors from Cross Origin Resource Sharing, we will set \n//our headers to allow CORS with middleware like so:\napp.use(function(req, res, next) {\n res.setHeader('Access-Control-Allow-Origin', '*');\n res.setHeader('Access-Control-Allow-Credentials', 'true');\n res.setHeader('Access-Control-Allow-Methods', 'GET,HEAD,OPTIONS,POST,PUT,DELETE');\n res.setHeader('Access-Control-Allow-Headers', 'Access-Control-Allow-Headers, Origin,Accept, X-Requested-With, Content-Type, Access-Control-Request-Method, Access-Control-Request-Headers');\n//and remove cacheing so we get the most recent comments\n res.setHeader('Cache-Control', 'no-cache');\n next();\n});\n//now we can set the route path & initialize the API\nrouter.get('/', function(req, res) {\n res.json({ message: 'API Initialized!'});\n});\n\n//adding the /comments route to our /api router\nrouter.route('/comments')\n //retrieve all comments from the database\n  .get(function(req, res) {\n  //looks at our Comment Schema\n  Comment.find(function(err, comments) {\n    if (err)\n    res.send(err);\n    //responds with a json object of our database comments.\n    res.json(comments)\n  });\n })\n \n \n\n//Use our router configuration when we call /api\napp.use('/api', router);\n//starts the server and listens for requests\napp.listen(port, function() {\n console.log(`api running on port ${port}`);\n});"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var mongoose = require(\"mongoose\");\n\nvar express = require(\"express\");\n\nvar bodyParser = require(\"body-parser\");\n\nvar logger = require(\"morgan\");\n\nvar Data = require(\"./data\");\n\nvar API_PORT = 3001;\nvar app = express();\nvar router = express.Router(); // this is our MongoDB database\n\nvar dbRoute = \"mongodb://jelo:a9bc839993@ds151382.mlab.com:51382/jelotest\"; // connects our back end code with the database\n\nmongoose.connect(dbRoute, {\n  useNewUrlParser: true\n});\nvar db = mongoose.connection;\ndb.once(\"open\", function () {\n  return console.log(\"connected to the database\");\n}); // checks if connection with the database is successful\n\ndb.on(\"error\", console.error.bind(console, \"MongoDB connection error:\")); // (optional) only made for logging and\n// bodyParser, parses the request body to be a readable json format\n\napp.use(bodyParser.urlencoded({\n  extended: false\n}));\napp.use(bodyParser.json());\napp.use(logger(\"dev\")); // this is our get method\n// this method fetches all available data in our database\n\nrouter.get(\"/getData\", function (req, res) {\n  Data.find(function (err, data) {\n    if (err) return res.json({\n      success: false,\n      error: err\n    });\n    return res.json({\n      success: true,\n      data: data\n    });\n  });\n}); // this is our update method\n// this method overwrites existing data in our database\n\nrouter.post(\"/updateData\", function (req, res) {\n  var _req$body = req.body,\n      id = _req$body.id,\n      update = _req$body.update;\n  Data.findOneAndUpdate(id, update, function (err) {\n    if (err) return res.json({\n      success: false,\n      error: err\n    });\n    return res.json({\n      success: true\n    });\n  });\n}); // this is our delete method\n// this method removes existing data in our database\n\nrouter.delete(\"/deleteData\", function (req, res) {\n  var id = req.body.id;\n  Data.findOneAndDelete(id, function (err) {\n    if (err) return res.send(err);\n    return res.json({\n      success: true\n    });\n  });\n}); // this is our create methid\n// this method adds new data in our database\n\nrouter.post(\"/putData\", function (req, res) {\n  var data = new Data();\n  var _req$body2 = req.body,\n      id = _req$body2.id,\n      message = _req$body2.message;\n\n  if (!id && id !== 0 || !message) {\n    return res.json({\n      success: false,\n      error: \"INVALID INPUTS\"\n    });\n  }\n\n  data.message = message;\n  data.id = id;\n  data.save(function (err) {\n    if (err) return res.json({\n      success: false,\n      error: err\n    });\n    return res.json({\n      success: true\n    });\n  });\n}); // append /api for our http requests\n\napp.use(\"/api\", router); // launch our backend into a port\n\napp.listen(API_PORT, function () {\n  return console.log('LISTENING ON PORT ${API_PORT}');\n});","map":{"version":3,"sources":["/Users/loryleticee/first-project/src/server.js"],"names":["mongoose","require","express","bodyParser","logger","Data","API_PORT","app","router","Router","dbRoute","connect","useNewUrlParser","db","connection","once","console","log","on","error","bind","use","urlencoded","extended","json","get","req","res","find","err","data","success","post","body","id","update","findOneAndUpdate","delete","findOneAndDelete","send","message","save","listen"],"mappings":"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","sourcesContent":["\nconst mongoose = require(\"mongoose\");\nconst express = require(\"express\");\nconst bodyParser = require(\"body-parser\");\nconst logger = require(\"morgan\");\nconst Data = require(\"./data\");\n\nconst API_PORT = 3001;\nconst app = express();\nconst router = express.Router();\n\n// this is our MongoDB database\nconst dbRoute = \"mongodb://jelo:a9bc839993@ds151382.mlab.com:51382/jelotest\";\n\n// connects our back end code with the database\nmongoose.connect(\n  dbRoute,\n  { useNewUrlParser: true }\n);\n\nlet db = mongoose.connection;\n\ndb.once(\"open\", () => console.log(\"connected to the database\"));\n\n// checks if connection with the database is successful\ndb.on(\"error\", console.error.bind(console, \"MongoDB connection error:\"));\n\n// (optional) only made for logging and\n// bodyParser, parses the request body to be a readable json format\napp.use(bodyParser.urlencoded({ extended: false }));\napp.use(bodyParser.json());\napp.use(logger(\"dev\"));\n\n// this is our get method\n// this method fetches all available data in our database\nrouter.get(\"/getData\", (req, res) => {\n  Data.find((err, data) => {\n    if (err) return res.json({ success: false, error: err });\n    return res.json({ success: true, data: data });\n  });\n});\n\n// this is our update method\n// this method overwrites existing data in our database\nrouter.post(\"/updateData\", (req, res) => {\n  const { id, update } = req.body;\n  Data.findOneAndUpdate(id, update, err => {\n    if (err) return res.json({ success: false, error: err });\n    return res.json({ success: true });\n  });\n});\n\n// this is our delete method\n// this method removes existing data in our database\nrouter.delete(\"/deleteData\", (req, res) => {\n  const { id } = req.body;\n  Data.findOneAndDelete(id, err => {\n    if (err) return res.send(err);\n    return res.json({ success: true });\n  });\n});\n\n// this is our create methid\n// this method adds new data in our database\nrouter.post(\"/putData\", (req, res) => {\n  let data = new Data();\n\n  const { id, message } = req.body;\n\n  if ((!id && id !== 0) || !message) {\n    return res.json({\n      success: false,\n      error: \"INVALID INPUTS\"\n    });\n  }\n  data.message = message;\n  data.id = id;\n  data.save(err => {\n    if (err) return res.json({ success: false, error: err });\n    return res.json({ success: true });\n  });\n});\n\n// append /api for our http requests\napp.use(\"/api\", router);\n\n// launch our backend into a port\napp.listen(API_PORT, () => console.log('LISTENING ON PORT ${API_PORT}'));"]},"metadata":{},"sourceType":"module"}
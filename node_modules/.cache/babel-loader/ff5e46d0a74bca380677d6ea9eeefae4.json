{"ast":null,"code":"'use strict'; //first we import our dependencies…\n\nimport express from 'express';\nimport mongoose from 'mongoose';\nimport bodyparser from 'body-parser'; //var Comment = require(\"./comments\");\n//and create our instances\n\nvar app = express();\nvar router = express.Router(); //set our port to either a predetermined port number if you have set \n//it up, or 3001\n\nvar port = process.env.API_PORT || 27017;\nmongoose.find('name', 'moi'); //now we should configure the API to use bodyParser and look for \n//JSON data in the request body\n//To prevent errors from Cross Origin Resource Sharing, we will set \n//our headers to allow CORS with middleware like so:\n\napp.use(function (req, res, next) {\n  res.setHeader('Access-Control-Allow-Origin', '*');\n  res.setHeader('Access-Control-Allow-Credentials', 'true');\n  res.setHeader('Access-Control-Allow-Methods', 'GET,HEAD,OPTIONS,POST,PUT,DELETE');\n  res.setHeader('Access-Control-Allow-Headers', 'Access-Control-Allow-Headers, Origin,Accept, X-Requested-With, Content-Type, Access-Control-Request-Method, Access-Control-Request-Headers'); //and remove cacheing so we get the most recent comments\n\n  res.setHeader('Cache-Control', 'no-cache');\n  next();\n}); //now we can set the route path & initialize the API\n\nrouter.get('/', function (req, res) {\n  res.json({\n    message: 'API Initialized!'\n  });\n}); //adding the /comments route to our /api router\n\nrouter.route('/comments') //retrieve all comments from the database\n.get(function (req, res) {\n  //looks at our Comment Schema\n  Comment.find(function (err, comments) {\n    if (err) res.send(err); //responds with a json object of our database comments.\n\n    res.json(comments);\n  });\n}); //Use our router configuration when we call /api\n\napp.use('/api', router); //starts the server and listens for requests\n\napp.listen(port, function () {\n  console.log(\"api running on port \".concat(port));\n});","map":{"version":3,"sources":["/Users/loryleticee/first-project/src/server.js"],"names":["express","mongoose","bodyparser","app","router","Router","port","process","env","API_PORT","find","use","req","res","next","setHeader","get","json","message","route","Comment","err","comments","send","listen","console","log"],"mappings":"AAAA,a,CACA;;AACA,OAAOA,OAAP,MAAoB,SAApB;AACA,OAAOC,QAAP,MAAqB,UAArB;AACA,OAAOC,UAAP,MAAuB,aAAvB,C,CACA;AACA;;AACA,IAAIC,GAAG,GAAGH,OAAO,EAAjB;AACA,IAAII,MAAM,GAAGJ,OAAO,CAACK,MAAR,EAAb,C,CACA;AACA;;AACA,IAAIC,IAAI,GAAGC,OAAO,CAACC,GAAR,CAAYC,QAAZ,IAAwB,KAAnC;AACCR,QAAQ,CAACS,IAAT,CAAc,MAAd,EAAqB,KAArB,E,CAGD;AACA;AAEA;AACA;;AACAP,GAAG,CAACQ,GAAJ,CAAQ,UAASC,GAAT,EAAcC,GAAd,EAAmBC,IAAnB,EAAyB;AAChCD,EAAAA,GAAG,CAACE,SAAJ,CAAc,6BAAd,EAA6C,GAA7C;AACAF,EAAAA,GAAG,CAACE,SAAJ,CAAc,kCAAd,EAAkD,MAAlD;AACAF,EAAAA,GAAG,CAACE,SAAJ,CAAc,8BAAd,EAA8C,kCAA9C;AACAF,EAAAA,GAAG,CAACE,SAAJ,CAAc,8BAAd,EAA8C,4IAA9C,EAJgC,CAKjC;;AACCF,EAAAA,GAAG,CAACE,SAAJ,CAAc,eAAd,EAA+B,UAA/B;AACAD,EAAAA,IAAI;AACJ,CARD,E,CASA;;AACAV,MAAM,CAACY,GAAP,CAAW,GAAX,EAAgB,UAASJ,GAAT,EAAcC,GAAd,EAAmB;AAClCA,EAAAA,GAAG,CAACI,IAAJ,CAAS;AAAEC,IAAAA,OAAO,EAAE;AAAX,GAAT;AACA,CAFD,E,CAIA;;AACAd,MAAM,CAACe,KAAP,CAAa,WAAb,EACC;AADD,CAEGH,GAFH,CAEO,UAASJ,GAAT,EAAcC,GAAd,EAAmB;AACxB;AACAO,EAAAA,OAAO,CAACV,IAAR,CAAa,UAASW,GAAT,EAAcC,QAAd,EAAwB;AACnC,QAAID,GAAJ,EACAR,GAAG,CAACU,IAAJ,CAASF,GAAT,EAFmC,CAGnC;;AACAR,IAAAA,GAAG,CAACI,IAAJ,CAASK,QAAT;AACD,GALD;AAMA,CAVF,E,CAcA;;AACAnB,GAAG,CAACQ,GAAJ,CAAQ,MAAR,EAAgBP,MAAhB,E,CACA;;AACAD,GAAG,CAACqB,MAAJ,CAAWlB,IAAX,EAAiB,YAAW;AAC3BmB,EAAAA,OAAO,CAACC,GAAR,+BAAmCpB,IAAnC;AACA,CAFD","sourcesContent":["'use strict'\n//first we import our dependencies…\nimport express from 'express';\nimport mongoose from 'mongoose';\nimport bodyparser from 'body-parser';\n//var Comment = require(\"./comments\");\n//and create our instances\nvar app = express();\nvar router = express.Router();\n//set our port to either a predetermined port number if you have set \n//it up, or 3001\nvar port = process.env.API_PORT || 27017;\n mongoose.find('name','moi');\n\n\n//now we should configure the API to use bodyParser and look for \n//JSON data in the request body\n\n//To prevent errors from Cross Origin Resource Sharing, we will set \n//our headers to allow CORS with middleware like so:\napp.use(function(req, res, next) {\n res.setHeader('Access-Control-Allow-Origin', '*');\n res.setHeader('Access-Control-Allow-Credentials', 'true');\n res.setHeader('Access-Control-Allow-Methods', 'GET,HEAD,OPTIONS,POST,PUT,DELETE');\n res.setHeader('Access-Control-Allow-Headers', 'Access-Control-Allow-Headers, Origin,Accept, X-Requested-With, Content-Type, Access-Control-Request-Method, Access-Control-Request-Headers');\n//and remove cacheing so we get the most recent comments\n res.setHeader('Cache-Control', 'no-cache');\n next();\n});\n//now we can set the route path & initialize the API\nrouter.get('/', function(req, res) {\n res.json({ message: 'API Initialized!'});\n});\n\n//adding the /comments route to our /api router\nrouter.route('/comments')\n //retrieve all comments from the database\n  .get(function(req, res) {\n  //looks at our Comment Schema\n  Comment.find(function(err, comments) {\n    if (err)\n    res.send(err);\n    //responds with a json object of our database comments.\n    res.json(comments)\n  });\n })\n \n \n\n//Use our router configuration when we call /api\napp.use('/api', router);\n//starts the server and listens for requests\napp.listen(port, function() {\n console.log(`api running on port ${port}`);\n});"]},"metadata":{},"sourceType":"module"}
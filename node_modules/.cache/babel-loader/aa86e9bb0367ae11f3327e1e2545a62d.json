{"ast":null,"code":"'use strict'; //first we import our dependencies…\n//var express = require(\"express\");\n\nvar mongoose = require(\"mongoose\");\n\nvar bodyParser = require(\"body-parser\");\n\nvar Comment = require(\"./comments\"); //and create our instances\n\n\nvar app = express();\nvar router = express.Router(); //set our port to either a predetermined port number if you have set \n//it up, or 3001\n\nvar port = process.env.API_PORT || 3001;\nmongoose.find('name', 'moi'); // db config\n\nmongoose.connect('mongodb://:@localhost:27017/mesclients');\nconsole.log(mongoose); //now we should configure the API to use bodyParser and look for \n//JSON data in the request body\n\napp.use(bodyParser.urlencoded({\n  extended: true\n}));\napp.use(bodyParser.json()); //To prevent errors from Cross Origin Resource Sharing, we will set \n//our headers to allow CORS with middleware like so:\n\napp.use(function (req, res, next) {\n  res.setHeader('Access-Control-Allow-Origin', '*');\n  res.setHeader('Access-Control-Allow-Credentials', 'true');\n  res.setHeader('Access-Control-Allow-Methods', 'GET,HEAD,OPTIONS,POST,PUT,DELETE');\n  res.setHeader('Access-Control-Allow-Headers', 'Access-Control-Allow-Headers, Origin,Accept, X-Requested-With, Content-Type, Access-Control-Request-Method, Access-Control-Request-Headers'); //and remove cacheing so we get the most recent comments\n\n  res.setHeader('Cache-Control', 'no-cache');\n  next();\n}); //now we can set the route path & initialize the API\n\nrouter.get('/', function (req, res) {\n  res.json({\n    message: 'API Initialized!'\n  });\n}); //adding the /comments route to our /api router\n\nrouter.route('/comments') //retrieve all comments from the database\n.get(function (req, res) {\n  //looks at our Comment Schema\n  Comment.find(function (err, comments) {\n    if (err) res.send(err); //responds with a json object of our database comments.\n\n    res.json(comments);\n  });\n}) //post new comment to the database\n.post(function (req, res) {\n  var comment = new Comment(); //body parser lets us use the req.body\n\n  comment.author = req.body.author;\n  comment.text = req.body.text;\n  comment.save(function (err) {\n    if (err) res.send(err);\n    res.json({\n      message: 'Comment successfully added!'\n    });\n  });\n}); //Adding a route to a specific comment based on the database ID\n\nrouter.route('/comments/:comment_id') //The put method gives us the chance to update our comment based on \n//the ID passed to the route\n.put(function (req, res) {\n  Comment.findById(req.params.comment_id, function (err, comment) {\n    if (err) res.send(err); //Setting the new author and text to whatever was changed. If \n    //nothing was changed we will not alter  the field. \n    //(req.body.author) ? comment.author = req.body.author : null;\n    // (req.body.text) ? comment.text = req.body.text : null;\n    //save comment\n\n    comment.save(function (err) {\n      if (err) res.send(err);\n      res.json({\n        message: 'Comment has been updated.'\n      });\n    });\n  });\n}) //delete method for removing a comment from our database\n.delete(function (req, res) {\n  //selects the comment by its ID, then removes it.\n  Comment.remove({\n    _id: req.params.comment_id\n  }, function (err, comment) {\n    if (err) res.send(err);\n    res.json({\n      message: 'Comment has been deleted.'\n    });\n  });\n}); //Use our router configuration when we call /api\n\napp.use('/api', router); //starts the server and listens for requests\n\napp.listen(port, function () {\n  console.log(\"api running on port \".concat(port));\n});","map":{"version":3,"sources":["/Users/loryleticee/first-project/src/server.js"],"names":["mongoose","require","bodyParser","Comment","app","express","router","Router","port","process","env","API_PORT","find","connect","console","log","use","urlencoded","extended","json","req","res","next","setHeader","get","message","route","err","comments","send","post","comment","author","body","text","save","put","findById","params","comment_id","delete","remove","_id","listen"],"mappings":"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","sourcesContent":["'use strict'\n//first we import our dependencies…\n//var express = require(\"express\");\nvar mongoose = require(\"mongoose\");\nvar bodyParser = require(\"body-parser\");\nvar Comment = require(\"./comments\");\n//and create our instances\nvar app = express();\nvar router = express.Router();\n//set our port to either a predetermined port number if you have set \n//it up, or 3001\nvar port = process.env.API_PORT || 3001;\n mongoose.find('name','moi');\n// db config\nmongoose.connect('mongodb://:@localhost:27017/mesclients');\nconsole.log(mongoose);\n\n//now we should configure the API to use bodyParser and look for \n//JSON data in the request body\napp.use(bodyParser.urlencoded({ extended: true }));\napp.use(bodyParser.json());\n//To prevent errors from Cross Origin Resource Sharing, we will set \n//our headers to allow CORS with middleware like so:\napp.use(function(req, res, next) {\n res.setHeader('Access-Control-Allow-Origin', '*');\n res.setHeader('Access-Control-Allow-Credentials', 'true');\n res.setHeader('Access-Control-Allow-Methods', 'GET,HEAD,OPTIONS,POST,PUT,DELETE');\n res.setHeader('Access-Control-Allow-Headers', 'Access-Control-Allow-Headers, Origin,Accept, X-Requested-With, Content-Type, Access-Control-Request-Method, Access-Control-Request-Headers');\n//and remove cacheing so we get the most recent comments\n res.setHeader('Cache-Control', 'no-cache');\n next();\n});\n//now we can set the route path & initialize the API\nrouter.get('/', function(req, res) {\n res.json({ message: 'API Initialized!'});\n});\n\n//adding the /comments route to our /api router\nrouter.route('/comments')\n //retrieve all comments from the database\n  .get(function(req, res) {\n  //looks at our Comment Schema\n  Comment.find(function(err, comments) {\n    if (err)\n    res.send(err);\n    //responds with a json object of our database comments.\n    res.json(comments)\n  });\n })\n //post new comment to the database\n  .post(function(req, res) {\n    var comment = new Comment();\n    //body parser lets us use the req.body\n    comment.author = req.body.author;\n    comment.text = req.body.text;\n    comment.save(function(err) {\n      if (err)\n      res.send(err);\n      res.json({ message: 'Comment successfully added!' });\n    });\n  });\n  //Adding a route to a specific comment based on the database ID\n  router.route('/comments/:comment_id')\n  //The put method gives us the chance to update our comment based on \n  //the ID passed to the route\n  .put((req, res) => {\n    Comment.findById(req.params.comment_id, (err, comment) => {\n      if(err) res.send(err);\n      //Setting the new author and text to whatever was changed. If \n      //nothing was changed we will not alter  the field. \n      //(req.body.author) ? comment.author = req.body.author : null;\n     // (req.body.text) ? comment.text = req.body.text : null;\n      //save comment\n      comment.save((err) => {\n        if(err) res.send(err);\n        res.json({message: 'Comment has been updated.'});\n      });\n    });\n  })\n   //delete method for removing a comment from our database\n   .delete((req, res) => {\n    //selects the comment by its ID, then removes it.\n    Comment.remove({_id: req.params.comment_id}, (err, comment) => {\n      if(err) res.send(err);\n      res.json({message: 'Comment has been deleted.'})\n    })\n   })\n\n//Use our router configuration when we call /api\napp.use('/api', router);\n//starts the server and listens for requests\napp.listen(port, function() {\n console.log(`api running on port ${port}`);\n});"]},"metadata":{},"sourceType":"module"}